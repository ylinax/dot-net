@using System.Web.Mvc
@using Profiling
@{
    var p = Model.MiniProfiler;
    var timingLookup = new Dictionary<SqlTiming, Timing>();
}
@functions 
{
    // to help with display, put some space around sammiched commas
    string AddSpacesToParameters(string commandString) 
    {
        return System.Text.RegularExpressions.Regex.Replace(commandString, @"[^\s],[^\s]", ", ");
    }
}
@helper RenderStatRow(int stat, string label) 
{
    if (stat <= 0) { return; }

    <tr>
        <td>@label</td>
        <td>@stat</td>
    </tr>
}
@helper RenderStatRow(double stat, string label, string unit = "<span class='ms'>ms</span>") 
{
    <tr>
        <td>@label</td>
        <td>@stat.ToString("#.0")@MvcHtmlString.Create(unit)</td>
    </tr>
}
<div class="profiler-result @(Model.ShowShareLink ? "profiler-result-full" : "")">
    <div class="profiler-popup-button">
        <div class="duration">
            @p.DurationMilliseconds<span class="ms">ms</span>
        </div>
    </div>

    <div class="profiler-popup">
        <div class="info">
            <span class="name">@p.Name</span>
            <span class="server">@p.MachineName at @p.Started</span>
        </div>
        <div class="profiler-output">
            <table class="timings"> 
            <tbody>
            @foreach (var t in p.GetTimingHierarchy())
            {
                <tr class="@(t.DurationMilliseconds <= 2 ? "dno" : "")">
                    <td class="label">
                        <span class="indent">@(new string('>', t.Depth))</span>
                        @t.Name
                        <span class="indent"> =</span>
                    </td>
                    <td class="duration" title="total time spent in this row">
                        @t.DurationMilliseconds<span class="ms">ms</span>
                    </td>
                @if (t.HasSqlTimings)
                {
                    t.SqlTimings.ForEach(s => timingLookup[s] = t); // we'll look this up later when rendering the queries
                    var readers = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.Reader);
                    var scalers = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.Scalar);
                    var nons = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.NonQuery);
                    
                    <td class="sql-count" title="@readers reader, @scalers scaler, @nons non-query statements executed">
                        <a class="show-queries-for-@t.Name.GetHashCode()">@t.SqlTimings.Count<span class="ms">sql</span></a>
                    </td>
                    <td class="duration" title="time spent executing queries in this row">
                        @t.SqlTimings.Sum(s => s.DurationMilliseconds)<span class="ms">ms</span>
                    </td>
                }
                </tr>
            }
                <tr class="options">
                    <td colspan="2">
                    @if (!Model.ShowShareLink)
                    {
                        <a id="@p.Id" class="share-profiler">share</a>
                    }
                        <label class="toggle-low-duration"><input type="checkbox" checked> hide &lt; 2.0<span class="ms">ms</span></label>
                    </td>
                @if (p.HasSqlTimings)
                {
                    <td colspan="2">
                        @((p.DurationMillisecondsInSql / p.DurationMilliseconds * 100).ToString("0.#"))<span class="ms">% in sql</span>
                    </td> 
                }
                </tr>
            </tbody>
            </table>
        </div>
    </div>
@{ List<SqlTiming> sqlTimings; }
@if ((sqlTimings = p.GetSqlTimings()).Any()) 
{
    <table class="profiler-queries">
    <thead>
        <tr>
            <th style="text-align:right">time from start<br />query type<br />duration</th>
            <th style="text-align:left">call stack<br />query (click to expand)</th>
        </tr>
    </thead>
    @{ int i = 0; }
    @foreach (var s in sqlTimings)
    {
        <tr class="for-timing-@timingLookup[s].Name.GetHashCode() @(i++ % 2 == 0 ? "" : "odd")">
            <td class="info">
                <div><span class="ms">T+</span>@s.StartMilliseconds<span class="ms">ms</span></div>
                <div>@s.ExecuteType</div>
                <div>@s.DurationMilliseconds<span class="ms">ms</span></div>
            </td>
            <td>
                <div class="query">
                    <pre>@s.StackTraceSnippet</pre>
                    <code>@AddSpacesToParameters(s.CommandString)</code>
                </div>
            </td>
        </tr>
    }
    </table> 
}
</div>