@using System.Web
@using System.Web.Mvc
@using Profiling
@model Profiling.UI.MiniProfilerResultsModel
@{
    var p = Model.MiniProfiler;
    var parentLookup = new Dictionary<SqlTiming, Timing>();
}
@functions 
{
    // IMPORTANT: RazorEngine does not encode @object.ToString() calls by default!
    string e(object o)
    {
        return o == null ? "" : HttpUtility.HtmlEncode(o);
    }
    // to help with display, put some space around sammiched commas
    string AddSpacesToParameters(string commandString) 
    {
        return e(System.Text.RegularExpressions.Regex.Replace(commandString, @"[^\s],[^\s]", ", "));
    }
    
}
@helper RenderDuration(double ms) 
{
    @ms.ToString("0.0")<span class="ms">ms</span>
}
<div class="profiler-result @(Model.ShowShareLink ? "profiler-result-full" : "")">
    <div class="profiler-button">
        <div class="duration">
            @RenderDuration(p.DurationMilliseconds)
        </div>
    </div>

    <div class="profiler-popup">
        <div class="info">
            <span class="name">@e(p.Name)</span>
            <span class="time">@e(p.Started.ToString("u"))</span>
            <span class="server">@e(p.MachineName)</span>
        </div>
        <div class="profiler-output">
            <table class="timings">
            <tbody>
            @foreach (var t in p.GetTimingHierarchy())
            {
                <tr class="@(t.DurationMilliseconds <= 2 ? "negligible" : "")" data-timing-id="@t.Id">
                    <td class="label">
                        <span class="indent">@(new string('>', t.Depth))</span>
                        @e(t.Name)
                        <span class="indent"> =</span>
                    </td>
                    <td class="duration" title="total time spent in this row">
                        @RenderDuration(t.DurationMilliseconds.GetValueOrDefault())
                    </td>
                @if (t.HasSqlTimings)
                {
                    t.SqlTimings.ForEach(s => parentLookup[s] = t); // we'll look this up later when rendering the queries
                    var readers = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.Reader);
                    var scalers = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.Scalar);
                    var nons = t.SqlTimings.Count(s => s.ExecuteType == ExecuteType.NonQuery);
                    
                    <td class="sql-count" title="@readers reader, @scalers scaler, @nons non-query statements executed">
                        <a class="show-queries-for-@t.Name.GetHashCode()">@t.SqlTimings.Count<span class="ms">sql</span></a>
                    </td>
                    <td class="duration" title="time spent executing queries in this row">
                        @RenderDuration(t.SqlTimings.Sum(s => s.DurationMilliseconds))
                    </td>
                }
                </tr>
            }
                <tr class="options">
                    <td colspan="2">
                    @if (!Model.ShowShareLink)
                    {
                        <a id="@p.Id" class="share-profiler">share</a>
                    }
                        <label class="toggle-low-duration"><input type="checkbox" checked> hide &lt; @RenderDuration(2)</label>
                    </td>
                @if (p.HasSqlTimings)
                {
                    <td colspan="2">
                        @((p.DurationMillisecondsInSql / p.DurationMilliseconds * 100).ToString("0.#"))<span class="ms">% in sql</span>
                    </td> 
                }
                </tr>
            </tbody>
            </table>
        </div>
    </div>
@{ List<SqlTiming> sqlTimings; }
@if ((sqlTimings = p.GetSqlTimings()).Any()) 
{
    <div class="profiler-queries">
        <table>
        <thead>
            <tr>
                <th style="text-align:right">time from start<br />query type<br />duration</th>
                <th style="text-align:left">call stack<br />query</th>
            </tr>
        </thead>
        <tbody>
        @{ int i = 0; }
        @foreach (var s in sqlTimings)
        {
            <tr class="@(i++ % 2 == 0 ? "" : "odd")" data-timing-id="@parentLookup[s].Id">
                <td class="info">
                    <div><span class="ms">T+</span>@s.StartMilliseconds<span class="ms">ms</span></div>
                    <div>@e(s.ExecuteType)</div>
                    <div>@s.DurationMilliseconds<span class="ms">ms</span></div>
                </td>
                <td>
                    <div class="query">
                        <pre>@e(s.StackTraceSnippet)</pre>
                        <code>@AddSpacesToParameters(s.CommandString)</code>
                    </div>
                </td>
            </tr>
        }
        </tbody>
        </table> 
    </div>
}
</div>